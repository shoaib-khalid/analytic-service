affinity: {}
applicationProdProperties:
  configmap:
    application-prod.properties: >
      # Mininal config (please refer production application.properties values)

      server.address=0.0.0.0

      server.port=9020

      server.servlet.context-path=/analytic-service/v1

      spring.output.ansi.enabled=ALWAYS

      spring.datasource.url=jdbc:mysql://my-release-mysql-primary.default.svc.cluster.local:3306/symplified_analytic

      spring.datasource.username=root

      spring.datasource.password=kalsym@123

      spring.jpa.show-sql=true


      logging.config= logback.xml


      services.user-service.bulk_authorities.url
      =https://api.symplified.it/user-service/v1/authorities/bulk

      services.user-service.session_details
      =https://api.symplified.it/user-service/v1/sessions/details

      generate.summary.scheduler.enabled=true

      generate.summary.scheduler.bulk.enabled=false

      generate.summary.scheduler.bulk=0 0 9 * * ?

      generate.summary.scheduler.cron=0 0 2 * * ?

      remove.history.scheduler.enabled=true
  volumeMount:
    - mountPath: /home/docker/Software/application-prod.properties
      name: analytic-service-approd-vol
      subPath: application-prod.properties
  volumes:
    - configMap:
        name: analytic-service-approd-cm
      name: analytic-service-approd-vol
applicationProperties:
  configmap:
    application.properties: |
      # Mininal config (please refer production application.properties values)
      spring.profiles.active=prod
      proj.name=analytic-service
      build.version=@project.version@
  volumeMount:
    - mountPath: /home/docker/Software/application.properties
      name: analytic-service-ap-vol
      subPath: application.properties
  volumes:
    - configMap:
        name: analytic-service-ap-cm
      name: analytic-service-ap-vol
autoscaling:
  enabled: false
  maxReplicas: 100
  minReplicas: 1
  targetCPUUtilizationPercentage: 80
fullnameOverride: ''
image:
  pullPolicy: Always
  repository: kalsym/analytic-service
  tag: 0.0.3
imagePullSecrets:
  - name: kalsym-docker-hub
ingress:
  annotations: {}
  className: ''
  enabled: true
  hosts:
    - host: api.symplified.it
      paths:
        - path: /analytic-service/v1
          pathType: ImplementationSpecific
  tls:
    - hosts:
        - api.symplified.it
      secretName: secret-tls-it
logback:
  configmap:
    logback.xml: |
      <?xml version="1.0" encoding="UTF-8"?>
      <configuration>

          <property name="LOGS" value="/home/docker/Software/logs/symplified" />
          <property name="CDRS" value="/home/docker/Software/logs" />

          <property resource="application.properties" />

          <appender name="Console" class="ch.qos.logback.core.ConsoleAppender">
              <layout class="ch.qos.logback.classic.PatternLayout">
                  <Pattern>
                      %black(%d{ISO8601}) %highlight(%-5level) %yellow(%C{1.}): %msg%n%throwable
                  </Pattern>
              </layout>
          </appender>

          <appender name="APPLICATION" class="ch.qos.logback.core.rolling.RollingFileAppender">
              <file>${LOGS}/analytic-service/analytic-service.log</file>
              <append>true</append>
              <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                  <!-- rollover daily and when the file reaches 10 MegaBytes -->
                  <fileNamePattern>${LOGS}/analytic-service/archived/analytic-service-%d{yyyy-MM-dd}.%i.log
                  </fileNamePattern>
                  <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                      <maxFileSize>10MB</maxFileSize>
                  </timeBasedFileNamingAndTriggeringPolicy>
              </rollingPolicy>
              <encoder class="ch.qos.logback.core.encoder.LayoutWrappingEncoder">
                  <charset>UTF-8</charset>
                  <layout class="ch.qos.logback.classic.PatternLayout">
                      <Pattern>%d %p %M %L [%t] - %m%n</Pattern>
                  </layout>
              </encoder>
          </appender>

          <appender name="CDR" class="ch.qos.logback.core.rolling.RollingFileAppender">
              <file>${CDRS}/analytic-service-cdr.csv</file>
              <append>true</append>
              <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                  <!-- rollover daily and when the file reaches 10 MegaBytes -->
                  <fileNamePattern>${CDRS}/analytic-service/cdrs/cdr-%d{yyyy-MM-dd}.%i.csv
                  </fileNamePattern>
                  <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                      <maxFileSize>10MB</maxFileSize>
                  </timeBasedFileNamingAndTriggeringPolicy>
              </rollingPolicy>
              <encoder class="ch.qos.logback.core.encoder.LayoutWrappingEncoder">
                  <charset>UTF-8</charset>
                  <layout class="ch.qos.logback.classic.PatternLayout">
                      <Pattern>%date{dd:MMM:yyyy;HH:mm:ss.SSS},%m%n</Pattern>
                  </layout>
              </encoder>
          </appender>

          <!-- LOG everything at INFO level -->
          <root level="INFO">
              <appender-ref ref="APPLICATION" />
          </root>

          <logger name="cdr" level="DEBUG" additivity="false">
              <appender-ref ref="CDR" />
          </logger>

          <!-- LOG "com.baeldung*" at TRACE level -->
          <!-- <logger name="application" level="DEBUG" additivity="true">
              <appender-ref ref="APPLICATION" />
          </logger> -->

      </configuration>
  volumeMount:
    - mountPath: /home/docker/Software/logback.xml
      name: analytic-service-lgb-vol
      subPath: logback.xml
  volumes:
    - configMap:
        name: analytic-service-lgb-cm
      name: analytic-service-lgb-vol
nameOverride: ''
nodeSelector: {}
podAnnotations: {}
podSecurityContext: {}
replicaCount: 1
resources: {}
securityContext: {}
service:
  port: 9020
  type: ClusterIP
serviceAccount:
  annotations: {}
  create: false
  name: ''
tolerations: []